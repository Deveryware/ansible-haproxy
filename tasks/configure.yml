---

## ASSEMBLE CONFIG - RESOLVERS

- name: 'Create directory for the resolvers'
  file:
    path: "{{ haproxy_config_dir }}/resolvers.d"
    state: directory

- name: "List files for the resolvers"
  find:
    paths: "{{ haproxy_config_dir }}/resolvers.d"
    patterns: "*.cfg"
  register: directory_contents
  changed_when: false

- name: "Remove unmanaged files for the resolvers"
  file:
    path: "{{ item.path }}"
    state: absent
  when: (item.path | basename) not in (haproxy_resolvers | json_query('[*].name') | map('regex_replace',  '(.*)', '\\1.cfg') | list)
  with_items: "{{ directory_contents.files }}"

- name: 'Build up the resolvers'
  template:
    src: "resolvers.cfg"
    dest: "{{ haproxy_config_dir }}/resolvers.d/{{ item.name }}.cfg"
  with_items: "{{ haproxy_resolvers }}"
  when: haproxy_resolvers is defined

## ASSEMBLE CONFIG - FRONTEND

- name: 'Create directory for the frontend'
  file:
    path: "{{ haproxy_config_dir }}/frontends.d"
    state: directory

- name: "List files for the frontends"
  find:
    paths: "{{ haproxy_config_dir }}/frontends.d"
    patterns: "*.cfg"
  register: directory_contents
  changed_when: false

- name: "Set frontends file list"
  set_fact:
    haproxy_frontends_file_list: >-
      {{ haproxy_frontends | json_query('[*].name') | map('regex_replace',  '^(.*)$', '\1.cfg') | list }}

- name: "Remove unmanaged files for the frontends"
  file:
    path: "{{ item.path }}"
    state: absent
  when: (item.path | basename) not in haproxy_frontends_file_list
  with_items: "{{ directory_contents.files }}"

- name: 'Build up the frontends'
  template:
    src: "frontend.cfg"
    dest: "{{ haproxy_config_dir }}/frontends.d/{{ item.name }}.cfg"
  with_items: "{{ haproxy_frontends }}"
  when: haproxy_frontends is defined

## ASSEMBLE CONFIG - BACKEND

- name: 'Create directory for the backends'
  file:
    path: "{{ haproxy_config_dir }}/backends.d"
    state: directory

- name: "List files for the backends"
  find:
    paths: "{{ haproxy_config_dir }}/backends.d"
    patterns: "*.cfg"
  register: directory_contents
  changed_when: false

- name: "Set backends file list"
  set_fact:
    haproxy_backends_file_list: >-
      {{ haproxy_backends | json_query('[*].name') | map('regex_replace',  '^(.*)$', '\1.cfg') | list }}

- name: "Remove unmanaged files for the backends"
  file:
    path: "{{ item.path }}"
    state: absent
  when: (item.path | basename) not in haproxy_backends_file_list
  with_items: "{{ directory_contents.files }}"

- name: 'Build up the backends'
  template:
    src: "backend.cfg"
    dest: "{{ haproxy_config_dir }}/backends.d/{{ item.name }}.cfg"
  with_items: "{{ haproxy_backends }}"
  when: haproxy_backends is defined

## ASSEMBLE CONFIG - LISTEN

- name: 'Create directory for the listen sections'
  file:
    path: "{{ haproxy_config_dir }}/listen.d"
    state: directory

- name: "List files the listen sections"
  find:
    paths: "{{ haproxy_config_dir }}/listen.d"
    patterns: "*.cfg"
  register: directory_contents
  changed_when: false

- name: "Set listen file list"
  set_fact:
    haproxy_listen_file_list: >-
      {{ haproxy_listen | json_query('[*].name') | map('regex_replace',  '^(.*)$', '\1.cfg') | list }}

- name: "Remove unmanaged files the listen sections"
  file:
    path: "{{ item.path }}"
    state: absent
  when: (item.path | basename) not in haproxy_listen_file_list
  with_items: "{{ directory_contents.files }}"

- name: 'Build up the listen sections'
  template:
    src: "listen.cfg"
    dest: "{{ haproxy_config_dir }}/listen.d/{{ item.name }}.cfg"
  with_items: "{{ haproxy_listen }}"
  when: haproxy_listen is defined

## ASSEMBLE CONFIG - log-forward
- name:  log-forward section
  include_tasks: "configure-logForward.yml" 
  when: haproxy_logforward is defined

## ASSEMBLE CONFIG - USERLIST

- name: 'Create directory for the userlists'
  file: path={{ haproxy_config_dir }}/userlists.d state=directory

- name: "List files for the userlists"
  find:
    paths: "{{ haproxy_config_dir }}/userlists.d"
    patterns: "*.cfg"
  register: directory_contents
  changed_when: false

- name: "Remove unmanaged files for the userlists"
  file:
    path: "{{ item.path }}"
    state: absent
  when: (item.path | basename) not in (haproxy_userlists | json_query('[*].name') | map('regex_replace',  '^(.*)$', '\1.cfg') | list)
  with_items: "{{ directory_contents.files }}"

- name: 'Build up the userlist sections'
  template:
    src: userlist.cfg
    dest: "{{ haproxy_config_dir }}/userlists.d/{{ item.name }}.cfg"
  with_items: "{{ haproxy_userlists }}"
  when: haproxy_userlists is defined

## CREATE ERROR PAGES

- name: Add error directory
  file:
    path: "{{ haproxy_config_dir }}/errors"
    state: directory

- name: Ensure http 400 error file is present
  copy:
    src: 400.http
    dest: "{{ haproxy_config_dir }}/errors/400.http"

- name: Ensure http 403 error file is present
  copy:
    src: 403.http
    dest: "{{ haproxy_config_dir }}/errors/403.http"

- name: Ensure http 408 error file is present
  copy:
    src: 408.http
    dest: "{{ haproxy_config_dir }}/errors/408.http"

- name: Ensure http 500 error file is present
  copy:
    src: 500.http
    dest: "{{ haproxy_config_dir }}/errors/500.http"

- name: Ensure http 502 error file is present
  copy:
    src: 502.http
    dest: "{{ haproxy_config_dir }}/errors/502.http"

- name: Ensure http 503 error file is present
  copy:
    src: 503.http
    dest: "{{ haproxy_config_dir }}/errors/503.http"

- name: Ensure http 504 error file is present
  copy:
    src: 504.http
    dest: "{{ haproxy_config_dir }}/errors/504.http"

## ASSEMBLE CONFIG - GLOBAL & DEFAULT

- name: 'Create the compiled folder'
  file:
    path: "{{ haproxy_config_dir }}/compiled"
    state: directory

- name: 'Build up the global config'
  template:
    src: "global.cfg"
    dest: "{{ haproxy_config_dir }}/compiled/01-global.cfg"

- name: 'Build up the default config'
  template:
    src: "defaults.cfg"
    dest: "{{ haproxy_config_dir }}/compiled/02-defaults.cfg"

## ASSEMBLE FINAL CONFIG

- name: 'Assemble the resolvers sections configuration file'
  assemble:
    src: "{{ haproxy_config_dir }}/resolvers.d"
    dest: "{{ haproxy_config_dir }}/compiled/03-resolvers.cfg"

- name: 'Assemble the backends configuration file'
  assemble:
    src: "{{ haproxy_config_dir }}/backends.d"
    dest: "{{ haproxy_config_dir }}/compiled/04-backends.cfg"

- name: 'Assemble the frontends configuration file'
  assemble:
    src: "{{ haproxy_config_dir }}/frontends.d"
    dest: "{{ haproxy_config_dir }}/compiled/05-frontends.cfg"

- name: 'Assemble the listen sections configuration file'
  assemble:
    src: "{{ haproxy_config_dir }}/listen.d"
    dest: "{{ haproxy_config_dir }}/compiled/06-listen.cfg"

- name: Check if directory exist for the log-forward sections 
  stat:
    path: "{{ haproxy_config_dir }}/log-forward.d"
  register: out

- name: 'Assemble the log-forward sections configuration file'
  assemble:
    src: "{{ haproxy_config_dir }}/log-forward.d"
    dest: "{{ haproxy_config_dir }}/compiled/07-log-forward.cfg"
  when: out.stat.exists

- name: 'Assemble the userlists sections configuration file'
  assemble:
    src: "{{ haproxy_config_dir }}/userlists.d"
    dest: "{{ haproxy_config_dir }}/compiled/07-userlists.cfg"

- name: 'Assemble the final configuration file'
  assemble:
    src: "{{ haproxy_config_dir }}/compiled"
    dest: "{{ haproxy_config_file }}"
    backup: yes
    validate: "haproxy -c -f %s"
  notify: restart haproxy
